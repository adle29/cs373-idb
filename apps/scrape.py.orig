from models import *
from __init__ import db
import requests
import json
import time
from models import *

headers = { 'X-Auth-Token': '1a83f9cdfa664421bc7c1997f1409218', 'X-Response-Control': 'minified' }

teams_cache = dict()
seasons_cache = list()
standings_cache = list()
games_cache = list()
players_cache = list()

url_request_count = 0

def make_request(url):
    global url_request_count
    url_request_count += 1
    if (url_request_count < 15):
        r = requests.get(url, headers=headers)
    else:
        print ("Hit 15 requests, sleeping for 45 seconds")
        time.sleep(45)
        r = requests.get(url, headers=headers)
        url_request_count = 1

    print ("URL request amount " + str(url_request_count) + "\n")
    
    return r.text

def populate_seasons_for_year(year):
    url = 'http://api.football-data.org/v1/competitions/?season='+str(year)
    response = make_request(url)
    print("Populating seasons for year " + str(year)+ "\n")
    try:
        res = json.loads(response)
        for season in res:

            result = Season(
            	api_season_id = season["id"],
            	season_name = season["caption"],
            	league = season["league"],
            	year = season["year"],
            	num_teams = season["numberOfTeams"],
            	num_games = season["numberOfGames"],
            	num_match_days = season["numberOfMatchdays"],
            	cur_match_day = season["numberOfMatchdays"]  if season["currentMatchday"] is None else season["currentMatchday"]
            )

            seasons_cache.append(result)

    except Exception as e:
        print("[-]error getting data for season in year " + str(year)+ " error: " + str(e) )

def populate_teams_for_season(season):
    url = 'http://api.football-data.org/v1/competitions/' + str(season.api_season_id) +'/teams'
    response = make_request(url)
    # try:
    res = json.loads(response)
    print("$$$$$ Populating teams for season year " + " " + str(season.api_season_id) + "\n")
    teams_response = res["teams"]
    print(len(teams_response))
    for instance in teams_response:

        result = Team(
            api_team_id = instance["id"],
            team_name = instance["name"],
            logo_url = instance["crestUrl"],
            nickname = instance["shortName"],
            market_val = instance["squadMarketValue"]
        )

        if result.api_team_id in teams_cache:
            x = 2
        else:
            teams_cache[result.api_team_id] = result
            season.s_team.append(result)

    print("Finished populating teams for season year " + " " + str(season.api_season_id) + "\n")

    # except Exception as e:
    #     print("[-]error getting data for teams for season "+ str(season.api_season_id) + " error: \n"+ str(e) + "\n")

def populate_games_for_season(season):
    # url = 'http://api.football-data.org/v1/competitions/?season=2015'
    url = 'http://api.football-data.org/v1/competitions/' + str(season.api_season_id) +'/fixtures'
    response = make_request(url)
    print("Populating games for season " + str(season.api_season_id)+ "\n")
    try:
        res = json.loads(response)
        games_response = res["fixtures"]
        for instance in games_response:
            # with db.session.no_autoflush:
                # query =  db.session.query(Game).filter(Game.api_game_id == instance["id"]).first()
            result = Game(
            	api_game_id = instance["id"],
            	date = instance["date"],
                time = instance["date"],
                api_away_team_id = instance["awayTeamId"],
                api_home_team_id = instance["homeTeamId"],
            	match_day = instance["matchday"],
            	away_team_score = instance["result"]["goalsAwayTeam"],
            	home_team_score = instance["result"]["goalsHomeTeam"]
            )

            # if not query:
            games_cache.append(result)
            season.s_game.append(result)

    except Exception as e:
        print("[-]error getting data for games from season "+ str(season.api_season_id) + " error: "+ str(e) )

def populate_standings_for_season(season):
    # url = 'http://api.football-data.org/v1/competitions/?season=2015'
    url = 'http://api.football-data.org/v1/competitions/' + str(season.api_season_id) +'/leagueTable'
    response = make_request(url)
    print("Populating standings for season " + str(season.api_season_id)+ "\n")
    try:
        res = json.loads(response)
        match_day = res["matchday"]

        if "standing" in res.keys():
            standings = res["standing"]

            for instance in standings:
                result = Standing(
                    match_day = match_day,
                    group = "A",
                    rank = instance["rank"],
                    points = instance["points"],
                    matches_played = instance["playedGames"],
                    goals_for = instance["goals"],
                    goals_against = instance["goalsAgainst"],
                    api_team_id = instance["teamId"]
                )
                standings_cache.append(result)
                season.s_standing.append(result)

        elif "standings" in res.keys():
            standings = res["standings"]

            for key in standings:
                instance = standings[key]
                result = Standing(
                    match_day = match_day,
                    group = key,
                    rank = instance["rank"],
                    points = instance["points"],
                    matches_played = instance["playedGames"],
                    goals_for = instance["goals"],
                    goals_against = instance["goalsAgainst"],
                    api_team_id = instance["teamId"],
                    season_id = season.api_season_id
                )
                standings_cache.append(result)
                seasons.s_standing.append(result)
        #db.session.commit()

    except Exception as e:
        print("[-]error getting standings for season " +  str(season.api_season_id) + " error: \n" + str(e) +"\n")

def populate_players_for_team(team):
    url = 'http://api.football-data.org/v1/teams/'+str(team.api_team_id)+'/players'
    response = make_request(url)
    print("Populating players for season " + str(team.api_team_id)+ "\n")
    try:
        res = json.loads(response)
        players_response = res["players"]
        for instance in players_response:
            result = Player(
                name = instance["name"],
                position = instance["position"],
                jersey_num = instance["jerseyNumber"],
                birth = instance["dateOfBirth"],
                nation = instance["nationality"])

            team.t_player.append(result)
            players_cache.append(result)
            #db.session.commit()

    except Exception as e:
        print("error getting players for team " +  str(team.api_team_id) )
        print(e)

def connect_standings_to_teams():
    for rank in standings_cache:
        team = teams_cache[rank.api_team_id]
        rank.r_team = team

def connect_games_to_teams():
    for game in games_cache:
        home = teams_cache[game.api_home_team_id]
        away = teams_cache[game.api_away_team_id]
        game.g_team_home = home
        game.g_team_away = away

def fill_db():
    

    for season in seasons_cache:
        db.session.add(season)

    # db.session.commit()

    for game in games_cache:
        db.session.add(game)

    for team in teams_cache.values():
        db.session.add(team)

    # db.session.commit()

    for standing in standings_cache:
        db.session.add(standing)

    # db.session.commit()

    for player in players_cache:
        db.session.add(player)

    # db.session.commit()


    

    # db.session.commit()

    # for team in teams_cache:
    #     db.session.add(team)

    # db.session.commit()


def main():

    # populate_seasons_for_year(2015)

    # if len(seasons_cache) > 0:
    #     season = seasons_cache[0]

    #     populate_teams_for_season(season)

    #     populate_games_for_season(season)
    #     populate_standings_for_season(season)

    #     for team in teams_cache.values():
    #         populate_players_for_team(team)

    #     connect_standings_to_teams()
    #     connect_games_to_teams()

    #     fill_db()
    # else:
    #     print("DB was not populated.")

    

    db.session.commit()
<<<<<<< HEAD
    for year in range(2010, 2017):
=======
    for year in range(2015, 2017):
>>>>>>> 05758a0540f836168e47b14215ad5e0baf98d310
        populate_seasons_for_year(year)
    
    for season in seasons_cache:
        populate_teams_for_season(season)
        populate_games_for_season(season)
        populate_standings_for_season(season)
    
    for team in teams_cache.values():
        populate_players_for_team(team)
    
    connect_standings_to_teams()
    connect_games_to_teams()

    fill_db()
    
    db.session.commit()


if __name__ == "__main__":
    main()
